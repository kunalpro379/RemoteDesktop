generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Add your models here

model User {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username    String   @unique @db.VarChar(50)
  email       String   @unique @db.VarChar(100)
  phoneNumber String?  @db.VarChar(15) // Added phone number field
  gender      String?  @db.VarChar(10) // Added gender field
  createdAt   DateTime @default(now()) @db.Timestamp
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp

  // Relations
  devices        Device[]
  sessions       SessionParticipant[]
  logs           ConnectionLog[]
  analytics      UserAnalytics[]
  errorLogs      ErrorLog[]           @relation("ErrorLogUsers")
  hostedSessions Session[]            @relation("SessionHost")
}

model Device {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String   @db.Uuid
  deviceName    String   @db.VarChar(100)
  deviceIp      String   @db.VarChar(50)
  lastConnected DateTime @default(now()) @db.Timestamp
  createdAt     DateTime @default(now()) @db.Timestamp

  // Relations
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  connections ConnectionLog[] @relation("DeviceConnectionLogs")
}

model Session {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  hostId    String    @db.Uuid
  sessionId String    @unique @db.VarChar(50)
  passkey   String    @db.VarChar(100)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp
  expiresAt DateTime?

  // Relations
  host         User                 @relation("SessionHost", fields: [hostId], references: [id], onDelete: Cascade)
  participants SessionParticipant[]
  logs         ConnectionLog[]
  analytics    SessionAnalytics[]
  errorLogs    ErrorLog[]           @relation("SessionErrorLogs")
}

model SessionParticipant {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId String   @db.Uuid
  userId    String   @db.Uuid
  role      RoleType @default(CONTROLLER)
  joinedAt  DateTime @default(now()) @db.Timestamp
  isActive  Boolean  @default(true)

  // Relations
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum RoleType {
  HOST
  CONTROLLER
}

model ConnectionLog {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId      String    @db.Uuid
  userId         String    @db.Uuid
  deviceId       String    @db.Uuid
  connectedAt    DateTime  @default(now()) @db.Timestamp
  disconnectedAt DateTime?

  // Relations
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  device  Device  @relation("DeviceConnectionLogs", fields: [deviceId], references: [id], onDelete: Cascade)
}

model SessionAnalytics {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId     String   @db.Uuid
  totalJoins    Int      @default(0)
  totalMessages Int      @default(0)
  totalErrors   Int      @default(0)
  duration      Int?
  createdAt     DateTime @default(now()) @db.Timestamp

  // Relations
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model ErrorLog {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId    String?  @db.Uuid
  userId       String?  @db.Uuid
  errorCode    String   @db.VarChar(100)
  errorMessage String   @db.Text
  occurredAt   DateTime @default(now()) @db.Timestamp

  // Relations
  session Session? @relation("SessionErrorLogs", fields: [sessionId], references: [id], onDelete: Cascade)
  user    User?    @relation("ErrorLogUsers", fields: [userId], references: [id], onDelete: Cascade)
}

model UserAnalytics {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String   @db.Uuid
  totalSessions    Int      @default(0)
  totalConnections Int      @default(0)
  lastActive       DateTime @default(now()) @db.Timestamp
  createdAt        DateTime @default(now()) @db.Timestamp

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
